CS562: Applied Software Engineering
Project Proposal
Neil Parmar
(parmarn@oregonstate.edu)

Python Library:
Using TSTL, in this particular project, the python library namely “pSQL version 0.9.2” would be tested. Basically, pSQL wraps all the database accesses and all the data one gets from the database into certain easy-to-use objects. According to the literature available online, pSQL was originally developed using python1.5.2 and MySQL DB. It proposes to work under most of the python versions. Moreover, it is stable and is developed in the course of several moderately and certain heavily used web projects. Therefore, it should sufficiently work with tstl running with python version 2.7
Example[1]:
All public methods inside the pSQL are managed with the extensive documentation of strings. This is a general example of what pSQL Table object does is as follows:
|# python
|>>> import pSQL
|>>> print pSQL.Table.__doc__
Instances of this class represent database tables, one should not use it directly. The particular object basically implements the following methods: insert, select, has_key, keys, get_table. In order to retrieve a subset of data from this particular table, use it like:
table.colname['regex']. Example: addresses.Name["Fionn%"] will give you a set of all rows in the 'addresses' table that have 'Name' columns which begin with 'Fionn'. Alternatively: addresses['Name']['Fionn%']

TO TEST:

1. It is stated that pSQL would work with python1.5.2 and above. The code seems to have been   tested with python version 2.1 (most recently). In this project, would test with version 2.7, it proposes to have the stability to work with versions higher than 2.1. However, it states to work with pSQL 0.9.4 or above for the same.

2. It has the difficulty of handling NULL values,  would like to test the particular difficulties as it states no to use NULL values.

3. Also, it states no index columns is not recommended, as this results into major performance penalties due to pSQL checks for identical rows in order to keep its operations consistent. Therefore would like to further test the particular. 

5. The particular does not guarantee to support the ‘date’ field in the database. It proposes to use plain MySQL datetime field type. Hence, would like to test the type of error generated by the particular.

 6. It seems to be very sensitive to the amount of data. It can cause considerable delay and CPU overload. Therefore, in this project would like to test the particular and understand the delay caused by it. However, this may not be particularly tested by TSTL. But would like to understand the same. 

7. The particular MySQLdb engine which is used for developing the pSQL peculiarly converts all the number formats into the python LongType variables. These, when converting such variables the paper states that, python1.5.2   appends an “L” towards the end. Example, str(long(1234)) which results into ‘1234L’.
However pSQL patches the python1.5.2 str() method for NOT appending “L”s. But as we were using python 2.7 for this particular project, would like to test it using the TSTL tool.


REFERENCES:
[1]. http://software.fionet.com/pSQL/release/pSQL-1.2.1/README.pSQL
[2]. http://software.fionet.com/pSQL/

