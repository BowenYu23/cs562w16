

@import collections
@import bstree

<@
def heightOk(tree):
    h = tree.tree_height()
    l = len(tree.preorder())
    if (l == 0):
       return True
    m = math.log(l,2)
    # pre<(...)> is handled by TSTL, and is the value of ... at entry to the function
    assert(pre<(tree.preorder())> == tree.preorder())
    return h <= (m + 1)

def items(s):
    l = []
    for i in s:
       l.append(i)
    return sorted(l)


def test_after_reduce(sut): 
    sut.setLog(0) # if this was 1, there would be heavy logging of replays after reduction
@>


source: bstree.py


log: 1 <bstree>.preorder()
log: POST 1 <bstree>.preorder()


pool: <int> 3
pool: <bstree> 3 REF


property: heightOk(<bstree>) 



<int> := <[1..20]>


<bstree> := bstree.BSTree()


~<bstree>.insert(<int>) => \
   (len(<bstree,1>.preorder()) == pre<(len(<bstree,1>.preorder()))>+1) \
   or pre<(<bstree,1>.find(<int,1>))>


~<bstree>.delete(<int>) => \
   (len(<bstree,1>.preorder()) == pre<(len(<bstree,1>.preorder()))>-1) \
   or not pre<((<bstree,1>.find(<int,1>)))>





<bstree>.preorder()

~<bstree> == ~<bstree>


len(<bstree,1>.preorder()) > 5 -> <bstree>.display()



