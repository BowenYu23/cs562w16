# this file defines a test harness for sqlparse
@import sqlparse
@from sqlparse import tokens
@from sqlparse import compat

# helper python code
<@

# pretty print string for given parse tree
def pretty(parsed):
  def helper(parsed, i = 0):
    result = '%s%s \'%s\'\n' % (' ' * (2 * i), parsed._get_repr_name(), parsed._get_repr_value())
    if parsed.is_group():
      for t in filter(lambda t: not t.is_whitespace(), parsed.tokens):
        result += helper(t, i + 1)
    return result
  return '\n' + helper(parsed)

# check that parse tree equals statement string
def check(parsed, s):
  return compat.u(parsed) == s

# TODO: set logging level after reduce
#def test_after_reduce(sut): 
#  sut.setLog(0)

@>

# source for code coverage
source: sqlparse.py

# pools
pool: <sep>    3 # NOTE: python runs out of memory if pool size is at least 6

pool: <name>   3
pool: <col>    3
pool: <alias>  3

#pool: <num>    3
#pool: <val>    3
#pool: <expr>   3

pool: <cols>   3
pool: <which>  3
pool: <tab>    3

pool: <select> 3
pool: <parsed> 3

# TODO: properties

# TODO: logging
#log: POST 0 pretty(<parsed>)

<sep>     := <[' ', '\t', '\n', '\r']>
<sep>     := '/*' + <sep> + '*/'
~<sep>    += <sep>

<name>    := <['a', 'b', 'c', 'A', 'B', 'C']>
~<name>   += <name>
<col>     := <name>
<col>     := <name> + '.' + <name>
<alias>   := ''
<alias>   := 'AS' + <sep> + <name>

#<num>     := <['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']>
#<num,1> [0] != '0' -> ~<num> += <num>
#<val>     := 'NULL'
#<val>     := '\"' + <name> + '\"'
#<val>     := <num>
#<val>     := <col>
#<expr>    := <val> + ' == ' + <val>
#<expr>    := <val> + ' <> ' + <val>
#<expr>    := 'NOT ' + <expr>
#~<expr>   += ' AND ' + <expr>
#~<expr>   += ' OR ' + <expr>

<cols>    := <col> + <sep> + <alias>
~<cols>   += ',' + <sep> + <cols>

<tab>     := <name>
<tab>     := '(' + <sep> + <select> + <sep> + ')'
~<tab>    += <tab> + <sep> + <alias>

<select>  := 'SELECT' + <sep> + <cols> + <sep> + 'FROM' + <sep> + <tab> + ';' # 'WHERE' + <sep> + <expr> + ';'

<parsed>  := sqlparse.parse(<select>)[0] => check(<parsed,1>, <select,1>)

