# this file defines a test harness for sqlparse
@import sqlparse
@from sqlparse import tokens
@from sqlparse import compat

# helper python code
<@

# pretty print string for given parse tree
def pretty(parsed):
  def helper(parsed, i = 0):
    result = '%s%s \'%s\'\n' % (' ' * (2 * i), parsed._get_repr_name(), parsed._get_repr_value())
    if parsed.is_group():
      for t in filter(lambda t: not t.is_whitespace(), parsed.tokens):
        result += helper(t, i + 1)
    return result
  return '\n' + helper(parsed)

# TODO: check property of parse tree
def check(parsed, s):
  return compat.u(parsed) == s

@>

# source for code coverage
source: sqlparse.py

# pools
pool: <space>   3
pool: <comment> 3
pool: <sep>     6
pool: <comma>   3
pool: <lparen>  3
pool: <rparen>  3

pool: <name>    3
pool: <col>     3
pool: <alias>   3

pool: <num>     3
pool: <val>     3
pool: <expr>    3

pool: <cols>    3
pool: <which>   3
pool: <table>   3

pool: <select>  3
pool: <parsed>  3

# TODO: properties

# TODO: logging

<space>   := <[' ', '\t', '\n', '\r']>
~<space>  += <space>
<comment> := '/*' + <space> + '*/'
<sep>     := <space>
<sep>     := <comment>
~<sep>    += <sep>
<comma>   := <sep> + ',' + <sep>
<lparen>  := '(' + <sep>
<rparen>  := <sep> + ')'

<name>    := <['a', 'b', 'c', 'A', 'B', 'C']>
~<name>   += <name>
<col>     := <name>
<col>     := <name> + '.' + <name>
<alias>   := ''
<alias>   := 'AS' + <sep> + <name>

<num>     := <['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']>
<num,1> [0] != '0' -> ~<num> += <num>
<val>     := 'NULL'
<val>     := '\"' + <name> + '\"'
<val>     := <num>
<val>     := <col>
<expr>    := <val> + ' == ' + <val>
<expr>    := <val> + ' <> ' + <val>
<expr>    := 'NOT ' + <expr>
~<expr>   += ' AND ' + <expr>
~<expr>   += ' OR ' + <expr>

<which>   := <['', 'ALL', 'DISTINCT']>
<cols>    := <col> + <sep> + <alias>
~<cols>   += <comma> + <cols>

<table>   := <name>
<table>   := <lparen> + <select> + <rparen>
~<table>  += <table> + <sep> + <alias>

<select>  := 'SELECT' + <sep> + <which> + <sep> + <cols> + <sep> + \
             'FROM' + <sep> + <table> + <sep> + \
             'WHERE' + <sep> + <expr> + <sep> + ';'

<parsed> := sqlparse.parse(<select>)[0] => check(<parsed,1>, <select,1>)

