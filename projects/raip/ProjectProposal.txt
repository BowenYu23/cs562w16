Prathveer Rai
CS 562
Date : 24th January 2016

                                      Project Proposal

The project I will implement is based on the data structure of Binary Search Trees. A Binary Search Tree
are used to store data items in memory. They are a tree shaped structure which contain nodes and leafs.
These nodes and leafs contain key values stored and are organized in a sorted order where nodes with
key values greater than the root node are towards its right and values less than that of the root are to its
left. This criteria holds good for all the nodes.
The source file being tested is https://github.com/ashish0x90/pytree/tree/master/src/pytree. This is not
a standard python library and hence should probably contain some amount of bugs. The source being
tested has several modules that represent the manipulation features of the Binary Search Tree. Some of
these are as follows:

InOrder() – Returns node/leaf values in the ascending order of their key values.
PreOrder() – Returns the preordered traversal of the tree.
Find()- Returns the node that matches the given key value
Findall()- Returns all matching node.
Insert()- for a given key we need to insert the particular node/leaf key value in the tree structure
Delete() – for a given key we have to delete the particular key node/leaf structure from the tree.

These modules will need to be tested based on various inputs that could identify some bugs in the
program. Additionally the properties of the tree have to also be tested. Certain properties that need to
be check are the sorted key value nodes of the entire tree. For instance the left child node of the root
node has to be smaller than the root value and the right child node has to be greater than the root
node. Hence this tree has to adhere to this sorted property always. These checks can be done with the
help of TSTL. TSTL helps create random test cases of various input sizes to help illustrate any faulty
implementations in a source code. It helps to detect these bugs in the initial stages of their occurrence
or intervention and lists out a detailed report of various statistics. With TSTL automated scripts, we can
assign various sizes of inputs to all these modules and test their correctness and reliability. For example,
the InOrder() module needs to return the key values in the tree in a certain order and should always be
expected to do so. We would also need to check if it can handle different inputs. And also there is a
need to assign various boundary analysis cases to test the robustness of the modules and the properties
it needs to follow.

Following this an additional aim here is to try and attain 100% Coverage and if this not achieved then
there may be dead paths that need to be identified and corrected. Since 100% Coverage to lead to the
execution of all the statements successfully.

In Conclusion, with the help of TSTL automation scripts. It will be a good challenge to try and generate
several random test cases that would help me identify any potential bugs that exist in the source
mentioned. And by doing so I hope to understand more intricate details of testing and also be a
consistent user of the TSTL software in my future projects.
